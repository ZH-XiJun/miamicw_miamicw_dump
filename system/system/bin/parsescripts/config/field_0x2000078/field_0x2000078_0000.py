#!/usr/bin/env python
#coding=utf-8
#***********************************************************************
# * Copyright     Copyright(c) 2019 - Hisilicon Technoligies Co., Ltd.
# * Filename      field_0x2000078_0000.py
# * Description   analysis ipf dump
#***********************************************************************
'''
Created on 2014-11-14
 
@author: Neo
'''
import os
import re
import struct
import sys

ipf_field_def = [
    "IPF_SRST_REG",
    "IPF_SRST_STATE_REG",
    "IPF_CH_EN_REG",
    "IPF_EN_STATE_REG",
    "IPF_GATE_REG",
    "IPF_CTRL_REG",
    "IPF_DMA_CTRL0_REG",
    "IPF_DMA_CTRL1_REG",
    "IPF_VERSION_REG",
    "IPF_STATE0_REG",
    "IPF_STATE1_REG",
    "IPF_INT_CTRL_REG",
    "IPF_INT0_SUP_TIME_REG",
    "IPF_INT1_SUP_TIME_REG",
    "IPF_INT2_SUP_TIME_REG",
    "IPF_GEN_INT_REG",
    "IPF_INT0_UL_REG",
    "IPF_INT0_DL_REG",
    "IPF_INT1_UL_REG",
    "IPF_INT1_DL_REG",
    "IPF_INT2_UL_REG",
    "IPF_INT2_DL_REG",
    "IPF_INT0_EN_UL_REG",
    "IPF_INT0_EN_DL_REG",
    "IPF_INT1_EN_UL_REG",
    "IPF_INT1_EN_DL_REG",
    "IPF_INT2_EN_UL_REG",
    "IPF_INT2_EN_DL_REG",
    "IPF_INT_STATE_UL_REG",
    "IPF_INT_STATE_DL_REG",
    "IPF_FIFO_STATE0_REG",
    "IPF_FIFO_STATE1_REG",
    "IPF_FIFO_STATE2_REG",
    "IPF_FIFO_STATE3_REG",
    "IPF_FIFO_STATE4_REG",
    "IPF_FIFO_STATE5_REG",
    "IPF_TIME_OUT_REG",
    "IPF_PKT_LEN_REG",
    "IPF_FILTER_ZERO_INDEX_REG",
    "IPF_EF_BADDR_L_REG",
    "IPF_EF_BADDR_H_REG",
    "FLT_CHAIN_LOOP_REG",
    "IPF_TRANS_CNT_CTRL_REG",
    "IPF_TIMER_LOAD_REG",
    "IPF_TIMER_COUNTER_REG",
    "IPF_CH0_PKT_CNT0_REG",
    "IPF_CH0_PKT_CNT1_REG",
    "IPF_CH1_PKT_CNT_REG",
    "IPF_CH1_SPEC_FLT_RABID0_REG",
    "IPF_CH1_SPEC_FLT_RABID1_REG",
    "IPF_CH1_SPEC_FLT_RABID2_REG",
    "IPF_CH0_CTRL_REG",
    "IPF_CH0_STATE_REG",
    "IPF_CH0_BDQ0_BADDR_L_REG",
    "IPF_CH0_BDQ0_BADDR_H_REG",
    "IPF_CH0_BDQ0_SIZE_REG",
    "IPF_CH0_BDQ0_RPTR_REG",
    "IPF_CH0_BDQ0_WPTR_REG",
    "IPF_CH0_BDQ0_WADDR_L_REG",
    "IPF_CH0_BDQ0_WADDR_H_REG",
    "IPF_CH0_BDQ0_RADDR_L_REG",
    "IPF_CH0_BDQ0_RADDR_H_REG",
    "IPF_CH0_BDQ0_DEPTH_REG",
    "IPF_CH0_BDQ0_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH0_BDQ0_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH0_BDQ1_BADDR_L_REG",
    "IPF_CH0_BDQ1_BADDR_H_REG",
    "IPF_CH0_BDQ1_SIZE_REG",
    "IPF_CH0_BDQ1_RPTR_REG",
    "IPF_CH0_BDQ1_WPTR_REG",
    "IPF_CH0_BDQ1_WADDR_L_REG",
    "IPF_CH0_BDQ1_WADDR_H_REG",
    "IPF_CH0_BDQ1_RADDR_L_REG",
    "IPF_CH0_BDQ1_RADDR_H_REG",
    "IPF_CH0_BDQ1_DEPTH_REG",
    "IPF_CH0_BDQ1_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH0_BDQ1_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_CTRL_REG",
    "IPF_CH1_STATE_REG",
    "IPF_CH1_RDQ_BADDR_L_REG",
    "IPF_CH1_RDQ_BADDR_H_REG",
    "IPF_CH1_RDQ_SIZE_REG",
    "IPF_CH1_RDQ_WPTR_REG",
    "IPF_CH1_RDQ_RPTR_REG",
    "IPF_CH1_RDQ_WADDR_L_REG",
    "IPF_CH1_RDQ_WADDR_H_REG",
    "IPF_CH1_RDQ_RADDR_L_REG",
    "IPF_CH1_RDQ_RADDR_H_REG",
    "IPF_CH1_RDQ_DEPTH_REG",
    "IPF_CH1_RDQ_WPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_RDQ_WPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_ADQ_EN_CTRL_REG",
    "IPF_CH1_ADQ_SIZE_CTRL_REG",
    "IPF_CH1_ADQ0_BASE_L_REG",
    "IPF_CH1_ADQ0_BASE_H_REG",
    "IPF_CH1_ADQ0_STAT_REG",
    "IPF_CH1_ADQ0_WPTR_REG",
    "IPF_CH1_ADQ0_RPTR_REG",
    "IPF_CH1_ADQ0_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_ADQ0_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_ADQ1_BASE_L_REG",
    "IPF_CH1_ADQ1_BASE_H_REG",
    "IPF_CH1_ADQ1_STAT_REG",
    "IPF_CH1_ADQ1_WPTR_REG",
    "IPF_CH1_ADQ1_RPTR_REG",
    "IPF_CH1_ADQ1_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_ADQ1_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_RNRDQ_BADDR_L_REG",
    "IPF_CH1_RNRDQ_BADDR_H_REG",
    "IPF_CH1_RNRDQ_SIZE_REG",
    "IPF_CH1_RNRDQ_WPTR_REG",
    "IPF_CH1_RNRDQ_RPTR_REG",
    "IPF_CH1_RNRDQ_WADDR_L_REG",
    "IPF_CH1_RNRDQ_WADDR_H_REG",
    "IPF_CH1_RNRDQ_RADDR_L_REG",
    "IPF_CH1_RNRDQ_RADDR_H_REG",
    "IPF_CH1_RNRDQ_DEPTH_REG",
    "IPF_CH1_RNRDQ_WPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_RNRDQ_WPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_RARDQ_BADDR_L_REG",
    "IPF_CH1_RARDQ_BADDR_H_REG",
    "IPF_CH1_RARDQ_SIZE_REG",
    "IPF_CH1_RARDQ_WPTR_REG",
    "IPF_CH1_RARDQ_RPTR_REG",
    "IPF_CH1_RARDQ_WADDR_L_REG",
    "IPF_CH1_RARDQ_WADDR_H_REG",
    "IPF_CH1_RARDQ_RADDR_L_REG",
    "IPF_CH1_RARDQ_RADDR_H_REG",
    "IPF_CH1_RARDQ_DEPTH_REG",
    "IPF_CH1_RARDQ_WPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_RARDQ_WPTR_UPDATE_ADDR_H_REG",
    "FRAG_WPTR_REG",
    "TBL_UPDATE_REQ_REG",
    "TBL_UPDATE_ACK_REG",
    "FRAG_TLB_EN_IPV4_REG",
    "FRAG_TLB_EN_IPV6_REG",
    "TBL_QOS_DRB_EN0_REG",
    "TBL_QOS_DRB_EN1_REG",
    "TBL_PDU_DRB_EN_REG",
    "TBL_RABID_DRB_EN0_REG",
    "TBL_RABID_DRB_EN1_REG",
    "IPF_UL_RDQ0_FULL_CNT_REG",
    "IPF_UL_RDQ1_FULL_CNT_REG",
    "IPF_UL_BDQ0_EPTY_CNT_REG",
    "IPF_UL_BDQ1_EPTY_CNT_REG",
    "IPF_UL_ADQ0_EPTY_CNT_REG",
    "IPF_UL_ADQ1_EPTY_CNT_REG",
    "IPF_DL_RDQ_FULL_CNT_REG",
    "IPF_DL_BDQ0_EPTY_CNT_REG",
    "IPF_DL_BDQ1_EPTY_CNT_REG",
    "IPF_DL_RNRDQ_FULL_CNT_REG",
    "IPF_DL_RARDQ_FULL_CNT_REG",
    "IPF_DL_ADQ0_EPTY_CNT_REG",
    "IPF_DL_ADQ1_EPTY_CNT_REG",
    "TBLM_QOS_REFL_0_REG",
    "TBLM_QOS_REFL_1_REG",
    "TBLM_QOS_REFL_2_REG",
    "TBLM_QOS_REFL_3_REG",
    "TBLM_QOS_REFL_4_REG",
    "TBLM_QOS_REFL_5_REG",
    "TBLM_QOS_REFL_6_REG",
    "TBLM_QOS_REFL_7_REG",
    "TBLM_QOS_REFL_8_REG",
    "TBLM_QOS_REFL_9_REG",
    "TBLM_QOS_REFL_10_REG",
    "TBLM_QOS_REFL_11_REG",
    "TBLM_QOS_REFL_12_REG",
    "TBLM_QOS_REFL_13_REG",
    "TBLM_QOS_REFL_14_REG",
    "TBLM_QOS_REFL_15_REG",
    "TBLM_QOS_REFL_16_REG",
    "TBLM_QOS_REFL_17_REG",
    "TBLM_QOS_REFL_18_REG",
    "TBLM_QOS_REFL_19_REG",
    "TBLM_QOS_REFL_20_REG",
    "TBLM_QOS_REFL_21_REG",
    "TBLM_QOS_REFL_22_REG",
    "TBLM_QOS_REFL_23_REG",
    "TBLM_QOS_REFL_24_REG",
    "TBLM_QOS_REFL_25_REG",
    "TBLM_QOS_REFL_26_REG",
    "TBLM_QOS_REFL_27_REG",
    "TBLM_QOS_REFL_28_REG",
    "TBLM_QOS_REFL_29_REG",
    "TBLM_QOS_REFL_30_REG",
    "TBLM_QOS_REFL_31_REG",
    "TBLM_QOS_REFL_32_REG",
    "TBLM_QOS_REFL_33_REG",
    "TBLM_QOS_REFL_34_REG",
    "TBLM_QOS_REFL_35_REG",
    "TBLM_QOS_REFL_36_REG",
    "TBLM_QOS_REFL_37_REG",
    "TBLM_QOS_REFL_38_REG",
    "TBLM_QOS_REFL_39_REG",
    "TBLM_QOS_REFL_40_REG",
    "TBLM_QOS_REFL_41_REG",
    "TBLM_QOS_REFL_42_REG",
    "TBLM_QOS_REFL_43_REG",
    "TBLM_QOS_REFL_44_REG",
    "TBLM_QOS_REFL_45_REG",
    "TBLM_QOS_REFL_46_REG",
    "TBLM_QOS_REFL_47_REG",
    "TBLM_QOS_REFL_48_REG",
    "TBLM_QOS_REFL_49_REG",
    "TBLM_QOS_REFL_50_REG",
    "TBLM_QOS_REFL_51_REG",
    "TBLM_QOS_REFL_52_REG",
    "TBLM_QOS_REFL_53_REG",
    "TBLM_QOS_REFL_54_REG",
    "TBLM_QOS_REFL_55_REG",
    "TBLM_QOS_REFL_56_REG",
    "TBLM_QOS_REFL_57_REG",
    "TBLM_QOS_REFL_58_REG",
    "TBLM_QOS_REFL_59_REG",
    "TBLM_QOS_REFL_60_REG",
    "TBLM_QOS_REFL_61_REG",
    "TBLM_QOS_REFL_62_REG",
    "TBLM_QOS_REFL_63_REG",
    "TBLK_PDU_REFL_0_REG",
    "TBLK_PDU_REFL_1_REG",
    "TBLK_PDU_REFL_2_REG",
    "TBLK_PDU_REFL_3_REG",
    "TBLK_PDU_REFL_4_REG",
    "TBLK_PDU_REFL_5_REG",
    "TBLK_PDU_REFL_6_REG",
    "TBLK_PDU_REFL_7_REG",
    "TBLK_PDU_REFL_8_REG",
    "TBLK_PDU_REFL_9_REG",
    "TBLK_PDU_REFL_10_REG",
    "TBLK_PDU_REFL_11_REG",
    "TBLK_PDU_REFL_12_REG",
    "TBLK_PDU_REFL_13_REG",
    "TBLK_PDU_REFL_14_REG",
    "TBLK_PDU_REFL_15_REG",
    "TBLK_PDU_REFL_16_REG",
    "TBLK_PDU_REFL_17_REG",
    "TBLK_PDU_REFL_18_REG",
    "TBLK_PDU_REFL_19_REG",
    "TBLK_PDU_REFL_20_REG",
    "TBLK_PDU_REFL_21_REG",
    "TBLK_PDU_REFL_22_REG",
    "TBLK_PDU_REFL_23_REG",
    "TBLK_PDU_REFL_24_REG",
    "TBLK_PDU_REFL_25_REG",
    "TBLK_PDU_REFL_26_REG",
    "TBLK_PDU_REFL_27_REG",
    "TBLK_PDU_REFL_28_REG",
    "TBLK_PDU_REFL_29_REG",
    "TBLK_PDU_REFL_30_REG",
    "TBLK_PDU_REFL_31_REG",
    "TBLM_RAB_REFL_0_REG",
    "TBLM_RAB_REFL_1_REG",
    "TBLM_RAB_REFL_2_REG",
    "TBLM_RAB_REFL_3_REG",
    "TBLM_RAB_REFL_4_REG",
    "TBLM_RAB_REFL_5_REG",
    "TBLM_RAB_REFL_6_REG",
    "TBLM_RAB_REFL_7_REG",
    "TBLM_RAB_REFL_8_REG",
    "TBLM_RAB_REFL_9_REG",
    "TBLM_RAB_REFL_10_REG",
    "TBLM_RAB_REFL_11_REG",
    "TBLM_RAB_REFL_12_REG",
    "TBLM_RAB_REFL_13_REG",
    "TBLM_RAB_REFL_14_REG",
    "TBLM_RAB_REFL_15_REG",
    "TBLM_RAB_REFL_16_REG",
    "TBLM_RAB_REFL_17_REG",
    "TBLM_RAB_REFL_18_REG",
    "TBLM_RAB_REFL_19_REG",
    "TBLM_RAB_REFL_20_REG",
    "TBLM_RAB_REFL_21_REG",
    "TBLM_RAB_REFL_22_REG",
    "TBLM_RAB_REFL_23_REG",
    "TBLM_RAB_REFL_24_REG",
    "TBLM_RAB_REFL_25_REG",
    "TBLM_RAB_REFL_26_REG",
    "TBLM_RAB_REFL_27_REG",
    "TBLM_RAB_REFL_28_REG",
    "TBLM_RAB_REFL_29_REG",
    "TBLM_RAB_REFL_30_REG",
    "TBLM_RAB_REFL_31_REG",
    "TBLM_RAB_REFL_32_REG",
    "TBLM_RAB_REFL_33_REG",
    "TBLM_RAB_REFL_34_REG",
    "TBLM_RAB_REFL_35_REG",
    "TBLM_RAB_REFL_36_REG",
    "TBLM_RAB_REFL_37_REG",
    "TBLM_RAB_REFL_38_REG",
    "TBLM_RAB_REFL_39_REG",
    "TBLM_RAB_REFL_40_REG",
    "TBLM_RAB_REFL_41_REG",
    "TBLM_RAB_REFL_42_REG",
    "TBLM_RAB_REFL_43_REG",
    "TBLM_RAB_REFL_44_REG",
    "TBLM_RAB_REFL_45_REG",
    "TBLM_RAB_REFL_46_REG",
    "TBLM_RAB_REFL_47_REG",
    "TBLM_RAB_REFL_48_REG",
    "TBLM_RAB_REFL_49_REG",
    "TBLM_RAB_REFL_50_REG",
    "TBLM_RAB_REFL_51_REG",
    "TBLM_RAB_REFL_52_REG",
    "TBLM_RAB_REFL_53_REG",
    "TBLM_RAB_REFL_54_REG",
    "TBLM_RAB_REFL_55_REG",
    "TBLM_RAB_REFL_56_REG",
    "TBLM_RAB_REFL_57_REG",
    "TBLM_RAB_REFL_58_REG",
    "TBLM_RAB_REFL_59_REG",
    "TBLM_RAB_REFL_60_REG",
    "TBLM_RAB_REFL_61_REG",
    "TBLM_RAB_REFL_62_REG",
    "TBLM_RAB_REFL_63_REG",
    "IPF_SEC_ATTR_REG",
    "IPF_CH0_RDQ0_BADDR_L_REG",
    "IPF_CH0_RDQ0_BADDR_H_REG",
    "IPF_CH0_RDQ0_SIZE_REG",
    "IPF_CH0_RDQ0_WPTR_REG",
    "IPF_CH0_RDQ0_RPTR_REG",
    "IPF_CH0_RDQ0_WADDR_L_REG",
    "IPF_CH0_RDQ0_WADDR_H_REG",
    "IPF_CH0_RDQ0_RADDR_L_REG",
    "IPF_CH0_RDQ0_RADDR_H_REG",
    "IPF_CH0_RDQ0_DEPTH_REG",
    "IPF_CH0_RDQ0_WPTR_UPDATE_ADDR_L_REG",
    "IPF_CH0_RDQ0_WPTR_UPDATE_ADDR_H_REG",
    "IPF_CH0_RDQ1_BADDR_L_REG",
    "IPF_CH0_RDQ1_BADDR_H_REG",
    "IPF_CH0_RDQ1_SIZE_REG",
    "IPF_CH0_RDQ1_WPTR_REG",
    "IPF_CH0_RDQ1_RPTR_REG",
    "IPF_CH0_RDQ1_WADDR_L_REG",
    "IPF_CH0_RDQ1_WADDR_H_REG",
    "IPF_CH0_RDQ1_RADDR_L_REG",
    "IPF_CH0_RDQ1_RADDR_H_REG",
    "IPF_CH0_RDQ1_DEPTH_REG",
    "IPF_CH0_RDQ1_WPTR_UPDATE_ADDR_L_REG",
    "IPF_CH0_RDQ1_WPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_BDQ0_BADDR_L_REG",
    "IPF_CH1_BDQ0_BADDR_H_REG",
    "IPF_CH1_BDQ0_SIZE_REG",
    "IPF_CH1_BDQ0_WPTR_REG",
    "IPF_CH1_BDQ0_RPTR_REG",
    "IPF_CH1_BDQ0_WADDR_L_REG",
    "IPF_CH1_BDQ0_WADDR_H_REG",
    "IPF_CH1_BDQ0_RADDR_L_REG",
    "IPF_CH1_BDQ0_RADDR_H_REG",
    "IPF_CH1_BDQ0_DEPTH_REG",
    "IPF_CH1_BDQ0_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_BDQ0_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH1_BDQ1_BADDR_L_REG",
    "IPF_CH1_BDQ1_BADDR_H_REG",
    "IPF_CH1_BDQ1_SIZE_REG",
    "IPF_CH1_BDQ1_WPTR_REG",
    "IPF_CH1_BDQ1_RPTR_REG",
    "IPF_CH1_BDQ1_WADDR_L_REG",
    "IPF_CH1_BDQ1_WADDR_H_REG",
    "IPF_CH1_BDQ1_RADDR_L_REG",
    "IPF_CH1_BDQ1_RADDR_H_REG",
    "IPF_CH1_BDQ1_DEPTH_REG",
    "IPF_CH1_BDQ1_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH1_BDQ1_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH0_ADQ_EN_CTRL_REG",
    "IPF_CH0_ADQ_SIZE_CTRL_REG",
    "IPF_CH0_ADQ0_BASE_L_REG",
    "IPF_CH0_ADQ0_BASE_H_REG",
    "IPF_CH0_ADQ0_STAT_REG",
    "IPF_CH0_ADQ0_WPTR_REG",
    "IPF_CH0_ADQ0_RPTR_REG",
    "IPF_CH0_ADQ0_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH0_ADQ0_RPTR_UPDATE_ADDR_H_REG",
    "IPF_CH0_ADQ1_BASE_L_REG",
    "IPF_CH0_ADQ1_BASE_H_REG",
    "IPF_CH0_ADQ1_STAT_REG",
    "IPF_CH0_ADQ1_WPTR_REG",
    "IPF_CH0_ADQ1_RPTR_REG",
    "IPF_CH0_ADQ1_RPTR_UPDATE_ADDR_L_REG",
    "IPF_CH0_ADQ1_RPTR_UPDATE_ADDR_H_REG",    
]

def ipf_entry_parse(infile, outfile, offset):
    infile.seek(0 + offset)
    for i in range(0, int(len(ipf_field_def))):
        (reg, ) = struct.unpack("I", infile.read(4))
        outfile.writelines("%s 0x%08x\n" %(ipf_field_def[i], reg))
    return

def entry_0x2000078(infile, field, offset, slen, version, mode, outfile):
        try:
            if not field == '0x2000078':
                print('hidis field is ', field)
                print('current field is', '0x2000078')
                return error['ERR_CHECK_FIELD']
            elif not version == '0x0000':
                print('hidis version is ', version)
                print('current version is ', '0x0000')
                return error['ERR_CHECK_VERSION']
            elif not slen == '0x400':
                print('hids len is ', slen)
                print('current len is ', '0x400')
            #outfile.writelines("got entry entry_0x2000078")
            outfile.writelines("============ IPF ============\n")
            offset_v = eval(offset)
            ipf_entry_parse(infile, outfile, offset_v)
            return 0

        except Exception as e:
            print((str(e)))
            outfile.writelines(str(e))
            return 1


    
